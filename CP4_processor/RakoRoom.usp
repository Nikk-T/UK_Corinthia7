/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXCHANNELS 16
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE

#HELP_BEGIN
   RAKO systems basicly work using the next procedures.
   SELECT HOUSE - PERFORM COMMAND
   SELECT HOUSE - SELECT ROOM - PERFORM COMMAND
   SELECT HOUSE - SELECT ROOM - SELECT CHANNEL - PERFORM COMAND
   
   The macro's are written in the same way. The "house module" takes care of the SELECT HOUSE, SELECT ROOM
   and PERFORM COMMAND part. The "room module" takes care of the SELECT CHANNEL part.
   These two modules need to be placed together in one program. Per house that needs to be controlled you
   need one "house module" and one "room module". These two will then control all the rooms and channels in that house.
   
   So, this module control all the channels in one house.
   
   INPUTS:
   - selectChannel$[MAXCHANNELS]: select a CHANNEL of the currently selected ROOM
   - fromHouse$[2000]: input comming from the "house-module"
   
   OUTPUTS:
   - selectedChannel_out$[MAXCHANNEL]: feedback of the currently selected channel
   - TX$: output to the RAKO system
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT selectChannel$[MAXCHANNELS];
// STRING_INPUT 
BUFFER_INPUT fromHouse$[2000];

DIGITAL_OUTPUT selectChannel_out$[MAXCHANNELS];
// ANALOG_OUTPUT 
STRING_OUTPUT TX$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// }

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER x, lastChannel, selectedChannel, i, channel, command;
INTEGER xOK, Marker1;
STRING tempString[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH selectChannel$
{
    x = getLastModifiedArrayIndex();
    selectedChannel = x;
    selectChannel_out$[selectedChannel] = 1;
    makeString(TX$, "CH %d\x0D\x0A", selectedChannel);
    processlogic();
    for (i = 1 to lastChannel)
    {
    	if (i <> selectedChannel)
    	{
	    	selectChannel_out$[i] = 0;
	    }
    }	
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE fromHouse$
{
	if (xOK)
	{
		xOK = 0;
		while (len(fromHouse$))
		{
			if (find("\x0D\x0A", fromHouse$))
			{
				tempString = remove("\x0D\x0A", fromHouse$);
				if (find("CLEAR", tempString))
				{
					selectedChannel = 0;
					for (i = 1 to lastChannel)
				    {
				    	selectChannel_out$[i] = 0;
 				    }	
				}	
				clearbuffer(tempString);
			}			
		}
		xOK = 1;
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
    for (lastChannel = MAXCHANNELS to 1 step -1)
	{
		if (isSignalDefined(selectChannel$[lastChannel]))
		{
			break;
		}
	}
}


