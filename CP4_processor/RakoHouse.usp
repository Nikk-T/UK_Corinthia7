/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXROOMS 256
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE

#HELP_BEGIN
   RAKO systems basicly work using the next procedures.
   SELECT HOUSE - PERFORM COMMAND
   SELECT HOUSE - SELECT ROOM - PERFORM COMMAND
   SELECT HOUSE - SELECT ROOM - SELECT CHANNEL - PERFORM COMAND
   
   The macro's are written in the same way. The "house module" takes care of the SELECT HOUSE, SELECT ROOM
   and PERFORM COMMAND part. The "room module" takes care of the SELECT CHANNEL part.
   These two modules need to be placed together in one program. Per house that needs to be controlled you
   need one "house module" and one "room module". These two will then control all the rooms and channels in that house.
   
   So this module controls one specific house. The address has to be initiated with (for example) a analog initialize)
   setting the "address$ - input".
   
   INPUTS:
   - off$: turns the current selected HOUSE, ROOM or CHANNEL off
   - storeScene$: stores the current values to the last selected SCENE for the selected ROOM or CHANNEL
   (i.e. if a channel is selected only the value of this channel will be changed inside the scene)
   - scene(1-4)$: selects the SCENE 1, 2, 3 or 4 for the selected ROOM or CHANNEL
   - selectHouse$: selects the house to be controlled
   - selectRoom$[MAXROOMS]: selects the triggered room to be controlled
   - address$: sets the address of the house
   - value$: sets the value of the current selected HOUSE, ROOM or CHANNEL
   - RX$[2000]: input comming from the RAKO system
   
   OUTPUTS:
   - scene(1-4)_out$: gives feedback of the last selected SCENE. At all times only 1 off these 4 will be high
   When switching to another ROOM, the module will give give feedback of the last selected SCENE for this ROOM.
   - selectRoom_out$: gives feedback of the currently selected ROOM
   - TX$: output to the RAKO system
   - toRoom$: send data to the HOUSE's "room module"
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT off$, storeScene$, scene1$, scene2$, scene3$, scene4$;
DIGITAL_INPUT selectHouse$;
DIGITAL_INPUT selectRoom$[MAXROOMS];

ANALOG_INPUT address$;
ANALOG_INPUT value$;
// STRING_INPUT 
BUFFER_INPUT RX$[2000];

DIGITAL_OUTPUT scene1_out$, scene2_out$, scene3_out$, scene4_out$;
DIGITAL_OUTPUT selectRoom_out$[MAXROOMS];
// ANALOG_OUTPUT 
STRING_OUTPUT TX$;
STRING_OUTPUT toRoom$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// }

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER address, selectedRoom, x, lastRoom, xOK, Marker1, i, room, command;
INTEGER whichScene[MAXROOMS];
STRING tempString[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH selectRoom$
{
    x = getLastModifiedArrayIndex();
    selectedRoom = x;
    selectRoom_out$[selectedRoom] = 1;
    for (i = 1 to lastRoom)
    {
    	if (i <> selectedRoom)
    	{
	    	selectRoom_out$[i] = 0;
	    }
    }
    toRoom$ = "CLEAR\x0D\x0A";
    makeString(TX$, "RO %d\x0D\x0A", selectedRoom);
    processlogic();
    makeString(TX$, "CH 0\x0D\x0A");
    processlogic();
    scene1_out$ = 0;
    scene2_out$ = 0;
    scene3_out$ = 0;
    scene4_out$ = 0;
    switch (whichScene[selectedRoom])
    {
    	case (1): scene1_out$ = 1;
    	case (2): scene2_out$ = 1;
    	case (3): scene3_out$ = 1;
    	case (4): scene4_out$ = 1;
    }
}
   
PUSH selectHouse$
{
	makeString(TX$, "HO %d\x0D\x0A", address);
   	processlogic();
   	makeString(TX$, "RO 0\x0D\x0A");
   	processlogic();
   	makeString(TX$, "CH 0\x0D\x0A");
   	processlogic();
   	for (i = 1 to lastRoom)
    {
    	selectRoom_out$[i] = 0;
    }
   	toRoom$ = "CLEAR\x0D\x0A";
	selectedRoom = 0;	
}   
   
PUSH off$
{
	MakeString(TX$, "OFF\n");
}

PUSH scene1$
{
	if (selectedRoom) 
	{
		TX$ = "SC 1\x0D\x0A";	
		scene1_out$ = 1;
		scene2_out$ = 0;
		scene3_out$ = 0;
		scene4_out$ = 0;
	    whichScene[selectedRoom] = 1;
	}
}

PUSH scene2$
{
	if (selectedRoom)
	{
		TX$ = "SC 2\x0D\x0A";	
		scene1_out$ = 0;
		scene2_out$ = 1;
		scene3_out$ = 0;
		scene4_out$ = 0;
	    whichScene[selectedRoom] = 2;
	}
}

PUSH scene3$
{
	if (selectedRoom)
	{ 
		TX$ = "SC 3\x0D\x0A";	
		scene1_out$ = 0;
		scene2_out$ = 0;
		scene3_out$ = 1;
		scene4_out$ = 0;
	    whichScene[selectedRoom] = 3;
	}
}

PUSH scene4$
{
	if (selectedRoom)
	{
		TX$ = "SC 4\x0D\x0A";	
		scene1_out$ = 0;
		scene2_out$ = 0;
		scene3_out$ = 0;
		scene4_out$ = 1;
	    whichScene[selectedRoom] = 4;
	}
}
     
PUSH storeScene$
{
	if (scene1_out$ || scene2_out$ || scene3_out$ || scene4_out$)
	{
		TX$ = "STORE\x0D\x0A";
	}
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE address$
{
	address = address$;
}

CHANGE value$
{
	MakeString(TX$, "LEVEL %d\x0D\x0A", (value$ * 255) / 65535);
}

CHANGE RX$
{
	if (xOK)
	{
		xOK = 0;
		while (len(RX$))
		{
			if (find("\x0D\x0A", RX$))
			{
				tempString = remove("\x0D\x0A", RX$);
				Marker1 = find("<", tempString);
				if (Marker1)
				{
					room = atoi(mid(tempString, Marker1 + 1, 3));
					command = atoi(mid(tempString, Marker1 + 8, 5));
					if (command = 3 || command = 4 || command = 5 || command = 6)
					{
						whichScene[room] = command-2;
						if (selectedRoom = room)
						{
							scene1_out$ = 0;
						    scene2_out$ = 0;
						    scene3_out$ = 0;
						    scene4_out$ = 0;
						    switch (command)
						    {
						    	case (3): scene1_out$ = 1;
						    	case (4): scene2_out$ = 1;
						    	case (5): scene3_out$ = 1;
						    	case (6): scene4_out$ = 1;
						    }
						}
					}
				}
				clearbuffer(tempString);
			}			
		}
		xOK = 1;
	}
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    for (lastRoom = MAXROOMS to 1 step -1)
	{
		if (isSignalDefined(selectRoom$[lastRoom]))
		{
			break;
		}
	}
	xOK = 1;
}


